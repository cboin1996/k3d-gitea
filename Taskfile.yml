version: "3"

silent: true
output: prefixed

vars:
  CLUSTER_NAME: gitea-cluster
  KUBE_PROM_NAMESPACE: gitea
  APP_NAME: k3d-gitea
  HELM_VERS: v3.8.0
  GITEA_VERSION: 5.0.3
  POSTGRES_VERSION: 14.2.0
  IMAGE_NAME: k3d-gitea
tasks:
  
  install:
    prefix: install
    desc: |
      will perform installation of a cluster using k3d, clone the gitea repo, and install
      gitea + postgres using the go cli.
    deps: [helm:install]
    cmds:
      - task: k3d:create
      - task: argocd:install
      - task: go:build
      - task: gitea:install

  configure:
    prefix: configure
    desc: |
      configures the gitea installation using the go cli.
    cmds:
      - k3d-gitea psqlinit --psqlsecret ""

  uninstall:
    prefix: uninstall
    desc: |
      will uninstall the entire cluster.
    cmds:
      - k3d cluster delete {{.CLUSTER_NAME}}
  
  go:build:
    prefix: go < build
    desc: |
      builds the go application.
    cmds:
      - go build -v
    dir: app

  docker:build:
    prefix: docker < build
    desc: |
      runs the multi-stage docker build
    cmds:
      - docker build . --build-arg GITEA_VERSION={{.GITEA_VERSION}} -t {{.IMAGE_NAME}}

  helm:install:
    prefix: helm < install
    desc: installs helm, using version {{.HELM_VERS}} if it does not exist in /usr/local/bin/ already.
    cmds:
      - wget -O helm{{.HELM_VERS}}.tar.gz https://get.helm.sh/helm-{{.HELM_VERS}}-{{OS}}-amd64.tar.gz
      - tar -zxvf helm{{.HELM_VERS}}.tar.gz
      - sudo mv {{OS}}-amd64/helm /usr/local/bin/helm
      - rm helm{{.HELM_VERS}}.tar.gz
      - rm -rf {{OS}}-amd64
    status:
      - test -f /usr/local/bin/helm

  helm:uninstall:
    prefix: helm > uninstall
    desc: |
      Uninstalls helm, by deleting the binary from /usr/local/bin. This assumes that
      helm has been installed using this task file, in /usr/local/bin folder on macOS or linux.
    cmds:
      - sudo rm /usr/local/bin/helm

  argocd:install:
    prefix: argocd > install
    desc: installs arcgocd cluster wide, and sets up namespace for gitea
    cmds:
      - kubectl create ns argocd
      - kubectl create ns gitea
      - kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/release-2.3/manifests/install.yaml -n argocd
      - task: argocd:password

  argocd:uninstall:
    prefix: argocd < uninstall
    desc: uninstalls argocd
    cmds:
      - kubectl delete ns argocd
      - kubectl delete ns gitea
  
  argocd:password:
    prefix: argocd < password
    desc: get the password stored in argocd-initial-admin-secret
    cmds:
      - "echo username: admin"
      - kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo 

  gitea:install:
    prefix: gitea < install
    desc: installs gitea using the go cli
    cmds: 
      - ./k3d-gitea gitea --chartPath ../helm-chart
    dir: app

  gitea:clone:
    prefix: gitea < clone
    desc: |
      Clones gitea. Checks out the latest branch.
    cmds:
      - git clone https://gitea.com/gitea/helm-chart.git
      - cd helm-chart && git checkout v{{.GITEA_VERSION}} && helm dependency build
    dir: helm

  gitea:uninstall:
    prefix: gitea > uninstall
    desc: |
      uninstalls gitea.
    cmds:
      - helm uninstall gitea -n gitea
  
  pgadmin:install:
    prefix: pgadmin > install
    desc: |
      installs pgadmin.
    cmds:
      - helm repo add runix https://helm.runix.net
      - helm install pgadmin4 runix/pgadmin4
    
  pgadmin:uninstall:
    prefix: pgadmin < uninstall
    desc: |
      uninstalls pgadmin.
    cmds:
      - helm uninstall pgadmin4

  postgres:install:
    prefix: postgres > install
    desc: |
      installs postgres.
    cmds:
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - helm install postgres bitnami/postgresql --version {{.POSTGRES_VERSION}}
    
  postgres:uninstall:
    prefix: postgres < uninstall
    desc: |
      uninstalls postgres.
    cmds:
      - helm uninstall postgres

  postgres:password:
    prefix: postgres < password
    desc: |
      get the root postgres user password and store it in clipboard
    cmds:
      - kubectl get secret --namespace default postgres-postgresql -o jsonpath="{.data.postgres-password}" | base64 --decode | xsel -i -b

  k3d:create:
    prefix: k3d > create
    desc: create a k3d cluster, using the name {{.CLUSTER_NAME}}
    cmds:
      - k3d cluster create {{.CLUSTER_NAME}}

  k3d:destroy:
    prefix: k3d < destroy
    desc: destroy the k3d cluster with name {{.CLUSTER_NAME}}
    cmds:
      - k3d cluster delete {{.CLUSTER_NAME}}

  k3d:start:
    prefix: k3d > start
    desc: start the k3d cluster, using the name {{.CLUSTER_NAME}}
    cmds:
      - "k3d cluster start {{.CLUSTER_NAME}}"

  k3d:stop:
    prefix: k3d > stop
    desc: start the k3d cluster, with the name {{.CLUSTER_NAME}}
    cmds:
      - "k3d cluster stop {{.CLUSTER_NAME}}"